import { createSlice } from '@reduxjs/toolkit';
import { getToken } from 'src/common/utils/tokenManager.util';
import { RootState } from '../store';
import { handleLogin, logOutAction, loginAction, signUpAction } from './actions/authActions';

export interface AuthState {
  TOKEN?: string;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: AuthState = {
  status: 'idle',
  TOKEN: getToken() ?? undefined,
};

export const authSlice = createSlice({
  name: 'auth',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // loginActionSync: handleLogin,
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(signUpAction.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(signUpAction.fulfilled, handleLogin)
      .addCase(signUpAction.rejected, (state) => {
        state.status = 'failed';
        delete state.TOKEN;
      })

      .addCase(loginAction.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(loginAction.fulfilled, handleLogin)
      .addCase(loginAction.rejected, (state) => {
        state.status = 'failed';
        delete state.TOKEN;
      })

      .addCase(logOutAction.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(logOutAction.fulfilled, (state) => {
        state.status = 'idle';
        delete state.TOKEN;
      })
      .addCase(logOutAction.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

// export const { loginActionSync } = authSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectStatus = (state: RootState) => state.auth.status;
export const isLogin = (state: RootState) => {
  return Boolean(state.auth.TOKEN);
};
